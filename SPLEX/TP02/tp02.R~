#!env Rscript

pdf(file=ifelse(FALSE, "tp02_plots_summary.pdf", "tp02_plots_summary.pdf"))
attach(mtcars,warn.conflicts = FALSE)
# layout(matrix(c(1,2,3,4), 4, 1, byrow = TRUE))

#### #### Q1 #### ####

# import cluster package
library(cluster)

# set random seed
set.seed(19)

# artifical random data [x,y], size of 100
data <- rbind(matrix(rnorm(100, sd = 0.3), ncol = 2),matrix(rnorm(100, mean = 1, sd = 0.3), ncol = 2))

# set col names
colnames(data) <- c("x", "y")

# appliquer kmeans 
cl1 <- kmeans(data, 2)

# visulization
plot(data, col = cl1$cluster)
points(cl1$centers, col = 1:2, pch = 8, cex=2)

#### #### Q2 #### ####

# Hierarchical cluster analysis 
hc <- hclust(dist(data))
plot(hc)

# cutree
# k: an integer scalar or vector with the desired number of groups
# h: numeric scalar or vector with heights where the tree should be cut.
plot(hc,cutree(hc, k = 2))

#### #### Q3 #### ####

silVec <- c()
for ( i in 2 : (nrow(data)-1)) {
    cl <- cutree(hc, k=i)
    sil <- silhouette(cl,dist(data))
    silMean <- mean(sil[,3])
    silVec <- c(silVec,silMean)
}

plot(silVec)

plot(silhouette(cutree(hc, k = 2), dist(data)))
plot(silhouette(cutree(hc, k = 48), dist(data)))

dev.off()

#### Q4. Clustering de profils d'expression transcriptionnelle ####

library(Hmisc)
library(FunNet)
library(sna)
library(FactoMineR)

data(obese)
upm <- apply(as.matrix(up.frame), 1, as.numeric)
dnm <- apply(as.matrix(down.frame), 1, as.numeric)
ud <- cbind(upm,dnm)[-1,]

rownames(ud) <- colnames(up.frame[,-1])
colnames(ud) <- paste("g",as.character(1:ncol(ud)),sep="")

indnames <- rownames(ud)
lnames <- indnames[1:11]
tnames <- indnames[12:length(indnames)]

PCA(t(ud[lnames,]))
